
10_pwm_timer2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000247c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002614  08002614  00012614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002624  08002624  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08002624  08002624  00012624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800262c  0800262c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800262c  0800262c  0001262c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002630  08002630  00012630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000001c  08002650  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002650  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f98  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001595  00000000  00000000  00029fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0002b580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000860  00000000  00000000  0002be88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001586d  00000000  00000000  0002c6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a7c  00000000  00000000  00041f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a8a4  00000000  00000000  0004b9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6275  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025b4  00000000  00000000  000d62c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080025fc 	.word	0x080025fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	080025fc 	.word	0x080025fc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <SysTick_Handler>:
#include "main.h"

extern TIM_HandleTypeDef htimer2;

void SysTick_Handler (void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004d4:	f000 fb56 	bl	8000b84 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004d8:	f000 fca2 	bl	8000e20 <HAL_SYSTICK_IRQHandler>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer2);
 80004e4:	4802      	ldr	r0, [pc, #8]	; (80004f0 <TIM2_IRQHandler+0x10>)
 80004e6:	f001 fbe0 	bl	8001caa <HAL_TIM_IRQHandler>
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000048 	.word	0x20000048

080004f4 <main>:
volatile uint32_t pulse3_value = 6250000;  //to produce 2000Hz
volatile uint32_t pulse4_value = 3125000;  //to produce 4000Hz

volatile uint32_t ccr_content1, ccr_content2, ccr_content3, ccr_content4;

int main(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0

	HAL_Init();
 80004f8:	f000 faf2 	bl	8000ae0 <HAL_Init>

	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 80004fc:	2032      	movs	r0, #50	; 0x32
 80004fe:	f000 f82b 	bl	8000558 <SystemClock_Config_HSE>

	GPIO_Init();
 8000502:	f000 f8e5 	bl	80006d0 <GPIO_Init>

	TIMER2_Init();
 8000506:	f000 f909 	bl	800071c <TIMER2_Init>

	if (HAL_TIM_OC_Start_IT(&htimer2, TIM_CHANNEL_1) != HAL_OK) {
 800050a:	2100      	movs	r1, #0
 800050c:	4811      	ldr	r0, [pc, #68]	; (8000554 <main+0x60>)
 800050e:	f001 fa7f 	bl	8001a10 <HAL_TIM_OC_Start_IT>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <main+0x28>
		Error_handler();
 8000518:	f000 f9fe 	bl	8000918 <Error_handler>
	}

	if (HAL_TIM_OC_Start_IT(&htimer2, TIM_CHANNEL_2) != HAL_OK) {
 800051c:	2104      	movs	r1, #4
 800051e:	480d      	ldr	r0, [pc, #52]	; (8000554 <main+0x60>)
 8000520:	f001 fa76 	bl	8001a10 <HAL_TIM_OC_Start_IT>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <main+0x3a>
		Error_handler();
 800052a:	f000 f9f5 	bl	8000918 <Error_handler>
	}

	if (HAL_TIM_OC_Start_IT(&htimer2, TIM_CHANNEL_3) != HAL_OK) {
 800052e:	2108      	movs	r1, #8
 8000530:	4808      	ldr	r0, [pc, #32]	; (8000554 <main+0x60>)
 8000532:	f001 fa6d 	bl	8001a10 <HAL_TIM_OC_Start_IT>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <main+0x4c>
		Error_handler();
 800053c:	f000 f9ec 	bl	8000918 <Error_handler>
	}

	if (HAL_TIM_OC_Start_IT(&htimer2, TIM_CHANNEL_4) != HAL_OK) {
 8000540:	210c      	movs	r1, #12
 8000542:	4804      	ldr	r0, [pc, #16]	; (8000554 <main+0x60>)
 8000544:	f001 fa64 	bl	8001a10 <HAL_TIM_OC_Start_IT>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <main+0x5e>
		Error_handler();
 800054e:	f000 f9e3 	bl	8000918 <Error_handler>
	}

	while (1)
 8000552:	e7fe      	b.n	8000552 <main+0x5e>
 8000554:	20000048 	.word	0x20000048

08000558 <SystemClock_Config_HSE>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config_HSE(uint8_t clock_freq) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b098      	sub	sp, #96	; 0x60
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;
	uint8_t flash_latency = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE
 8000568:	2307      	movs	r3, #7
 800056a:	62bb      	str	r3, [r7, #40]	; 0x28
			| RCC_OSCILLATORTYPE_HSI;
	Osc_Init.HSEState = RCC_HSE_ON;
 800056c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000570:	62fb      	str	r3, [r7, #44]	; 0x2c
	Osc_Init.LSEState = RCC_LSE_ON;
 8000572:	2301      	movs	r3, #1
 8000574:	633b      	str	r3, [r7, #48]	; 0x30
	Osc_Init.HSIState = RCC_HSI_ON;
 8000576:	2301      	movs	r3, #1
 8000578:	637b      	str	r3, [r7, #52]	; 0x34
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	643b      	str	r3, [r7, #64]	; 0x40
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000582:	647b      	str	r3, [r7, #68]	; 0x44

	switch (clock_freq) {
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	2b64      	cmp	r3, #100	; 0x64
 8000588:	d037      	beq.n	80005fa <SystemClock_Config_HSE+0xa2>
 800058a:	2b64      	cmp	r3, #100	; 0x64
 800058c:	f300 8095 	bgt.w	80006ba <SystemClock_Config_HSE+0x162>
 8000590:	2b32      	cmp	r3, #50	; 0x32
 8000592:	d002      	beq.n	800059a <SystemClock_Config_HSE+0x42>
 8000594:	2b54      	cmp	r3, #84	; 0x54
 8000596:	d018      	beq.n	80005ca <SystemClock_Config_HSE+0x72>
		break;

	}

	default:
		return;
 8000598:	e08f      	b.n	80006ba <SystemClock_Config_HSE+0x162>
		Osc_Init.PLL.PLLM = 8;
 800059a:	2308      	movs	r3, #8
 800059c:	64bb      	str	r3, [r7, #72]	; 0x48
		Osc_Init.PLL.PLLN = 100;
 800059e:	2364      	movs	r3, #100	; 0x64
 80005a0:	64fb      	str	r3, [r7, #76]	; 0x4c
		Osc_Init.PLL.PLLP = 2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	653b      	str	r3, [r7, #80]	; 0x50
		Osc_Init.PLL.PLLQ = 2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	657b      	str	r3, [r7, #84]	; 0x54
		Clock_Init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 80005aa:	230f      	movs	r3, #15
 80005ac:	617b      	str	r3, [r7, #20]
		Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ae:	2302      	movs	r3, #2
 80005b0:	61bb      	str	r3, [r7, #24]
		Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
		Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ba:	623b      	str	r3, [r7, #32]
		Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 80005bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
		flash_latency = FLASH_ACR_LATENCY_1WS;
 80005c2:	2301      	movs	r3, #1
 80005c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		break;
 80005c8:	e04b      	b.n	8000662 <SystemClock_Config_HSE+0x10a>
		Osc_Init.PLL.PLLM = 8;
 80005ca:	2308      	movs	r3, #8
 80005cc:	64bb      	str	r3, [r7, #72]	; 0x48
		Osc_Init.PLL.PLLN = 168;
 80005ce:	23a8      	movs	r3, #168	; 0xa8
 80005d0:	64fb      	str	r3, [r7, #76]	; 0x4c
		Osc_Init.PLL.PLLP = 2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	653b      	str	r3, [r7, #80]	; 0x50
		Osc_Init.PLL.PLLQ = 2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	657b      	str	r3, [r7, #84]	; 0x54
		Clock_Init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 80005da:	230f      	movs	r3, #15
 80005dc:	617b      	str	r3, [r7, #20]
		Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2302      	movs	r3, #2
 80005e0:	61bb      	str	r3, [r7, #24]
		Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
		Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ea:	623b      	str	r3, [r7, #32]
		Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
		flash_latency = FLASH_ACR_LATENCY_2WS;
 80005f2:	2302      	movs	r3, #2
 80005f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		break;
 80005f8:	e033      	b.n	8000662 <SystemClock_Config_HSE+0x10a>
		__HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	4b31      	ldr	r3, [pc, #196]	; (80006c4 <SystemClock_Config_HSE+0x16c>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000602:	4a30      	ldr	r2, [pc, #192]	; (80006c4 <SystemClock_Config_HSE+0x16c>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000608:	6413      	str	r3, [r2, #64]	; 0x40
 800060a:	4b2e      	ldr	r3, [pc, #184]	; (80006c4 <SystemClock_Config_HSE+0x16c>)
 800060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
		__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	4b2b      	ldr	r3, [pc, #172]	; (80006c8 <SystemClock_Config_HSE+0x170>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a2a      	ldr	r2, [pc, #168]	; (80006c8 <SystemClock_Config_HSE+0x170>)
 8000620:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000624:	6013      	str	r3, [r2, #0]
 8000626:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <SystemClock_Config_HSE+0x170>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
		Osc_Init.PLL.PLLM = 8;
 8000632:	2308      	movs	r3, #8
 8000634:	64bb      	str	r3, [r7, #72]	; 0x48
		Osc_Init.PLL.PLLN = 200;
 8000636:	23c8      	movs	r3, #200	; 0xc8
 8000638:	64fb      	str	r3, [r7, #76]	; 0x4c
		Osc_Init.PLL.PLLP = 2;
 800063a:	2302      	movs	r3, #2
 800063c:	653b      	str	r3, [r7, #80]	; 0x50
		Osc_Init.PLL.PLLQ = 2;
 800063e:	2302      	movs	r3, #2
 8000640:	657b      	str	r3, [r7, #84]	; 0x54
		Clock_Init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8000642:	230f      	movs	r3, #15
 8000644:	617b      	str	r3, [r7, #20]
		Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2302      	movs	r3, #2
 8000648:	61bb      	str	r3, [r7, #24]
		Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
		Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 800064e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000652:	623b      	str	r3, [r7, #32]
		Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
		flash_latency = FLASH_ACR_LATENCY_3WS;
 800065a:	2303      	movs	r3, #3
 800065c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		break;
 8000660:	bf00      	nop
	}

	if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK) {
 8000662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fd86 	bl	8001178 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config_HSE+0x11e>
		Error_handler();
 8000672:	f000 f951 	bl	8000918 <Error_handler>
	}

	if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK) {
 8000676:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4611      	mov	r1, r2
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fff1 	bl	8001668 <HAL_RCC_ClockConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config_HSE+0x138>
		Error_handler();
 800068c:	f000 f944 	bl	8000918 <Error_handler>
	}

	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000690:	f001 f9b2 	bl	80019f8 <HAL_RCC_GetHCLKFreq>
 8000694:	65b8      	str	r0, [r7, #88]	; 0x58
	HAL_SYSTICK_Config(hclk_freq / 1000);
 8000696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000698:	4a0c      	ldr	r2, [pc, #48]	; (80006cc <SystemClock_Config_HSE+0x174>)
 800069a:	fba2 2303 	umull	r2, r3, r2, r3
 800069e:	099b      	lsrs	r3, r3, #6
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fb94 	bl	8000dce <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80006a6:	2004      	movs	r0, #4
 80006a8:	f000 fb9e 	bl	8000de8 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2100      	movs	r1, #0
 80006b0:	f04f 30ff 	mov.w	r0, #4294967295
 80006b4:	f000 fb61 	bl	8000d7a <HAL_NVIC_SetPriority>
 80006b8:	e000      	b.n	80006bc <SystemClock_Config_HSE+0x164>
		return;
 80006ba:	bf00      	nop

}
 80006bc:	3760      	adds	r7, #96	; 0x60
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000
 80006cc:	10624dd3 	.word	0x10624dd3

080006d0 <GPIO_Init>:

void GPIO_Init(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <GPIO_Init+0x44>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <GPIO_Init+0x44>)
 80006e0:	f043 0308 	orr.w	r3, r3, #8
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <GPIO_Init+0x44>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80006f2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006f6:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &ledgpio);
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	4619      	mov	r1, r3
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <GPIO_Init+0x48>)
 8000706:	f000 fb99 	bl	8000e3c <HAL_GPIO_Init>
}
 800070a:	bf00      	nop
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40020c00 	.word	0x40020c00

0800071c <TIMER2_Init>:

void TIMER2_Init(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef tim2PWM_Config;
	htimer2.Instance = TIM2;
 8000722:	4b3e      	ldr	r3, [pc, #248]	; (800081c <TIMER2_Init+0x100>)
 8000724:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000728:	601a      	str	r2, [r3, #0]
	htimer2.Init.Period = 10000 - 1;
 800072a:	4b3c      	ldr	r3, [pc, #240]	; (800081c <TIMER2_Init+0x100>)
 800072c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000730:	60da      	str	r2, [r3, #12]
	htimer2.Init.Prescaler = 4;
 8000732:	4b3a      	ldr	r3, [pc, #232]	; (800081c <TIMER2_Init+0x100>)
 8000734:	2204      	movs	r2, #4
 8000736:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_PWM_Init(&htimer2) != HAL_OK) {
 8000738:	4838      	ldr	r0, [pc, #224]	; (800081c <TIMER2_Init+0x100>)
 800073a:	f001 fa67 	bl	8001c0c <HAL_TIM_PWM_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <TIMER2_Init+0x2c>
		Error_handler();
 8000744:	f000 f8e8 	bl	8000918 <Error_handler>
	}

	memset(&tim2PWM_Config, 0, sizeof(tim2PWM_Config));
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	221c      	movs	r2, #28
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f001 ff4c 	bl	80025ec <memset>

	tim2PWM_Config.OCMode = TIM_OCMODE_PWM1;
 8000754:	2360      	movs	r3, #96	; 0x60
 8000756:	607b      	str	r3, [r7, #4]
	tim2PWM_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]

	tim2PWM_Config.Pulse = (htimer2.Init.Period * 25) / 100;
 800075c:	4b2f      	ldr	r3, [pc, #188]	; (800081c <TIMER2_Init+0x100>)
 800075e:	68da      	ldr	r2, [r3, #12]
 8000760:	4613      	mov	r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4413      	add	r3, r2
 8000766:	009a      	lsls	r2, r3, #2
 8000768:	4413      	add	r3, r2
 800076a:	4a2d      	ldr	r2, [pc, #180]	; (8000820 <TIMER2_Init+0x104>)
 800076c:	fba2 2303 	umull	r2, r3, r2, r3
 8000770:	095b      	lsrs	r3, r3, #5
 8000772:	60bb      	str	r3, [r7, #8]

	if (HAL_TIM_PWM_ConfigChannel(&htimer2, &tim2PWM_Config, TIM_CHANNEL_1)
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2200      	movs	r2, #0
 8000778:	4619      	mov	r1, r3
 800077a:	4828      	ldr	r0, [pc, #160]	; (800081c <TIMER2_Init+0x100>)
 800077c:	f001 fb9e 	bl	8001ebc <HAL_TIM_PWM_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <TIMER2_Init+0x6e>
			!= HAL_OK) {
		Error_handler();
 8000786:	f000 f8c7 	bl	8000918 <Error_handler>
	}

	tim2PWM_Config.Pulse = (htimer2.Init.Period * 45) / 100;
 800078a:	4b24      	ldr	r3, [pc, #144]	; (800081c <TIMER2_Init+0x100>)
 800078c:	68da      	ldr	r2, [r3, #12]
 800078e:	4613      	mov	r3, r2
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	4413      	add	r3, r2
 8000794:	011a      	lsls	r2, r3, #4
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	4a21      	ldr	r2, [pc, #132]	; (8000820 <TIMER2_Init+0x104>)
 800079a:	fba2 2303 	umull	r2, r3, r2, r3
 800079e:	095b      	lsrs	r3, r3, #5
 80007a0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htimer2, &tim2PWM_Config, TIM_CHANNEL_2)
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2204      	movs	r2, #4
 80007a6:	4619      	mov	r1, r3
 80007a8:	481c      	ldr	r0, [pc, #112]	; (800081c <TIMER2_Init+0x100>)
 80007aa:	f001 fb87 	bl	8001ebc <HAL_TIM_PWM_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <TIMER2_Init+0x9c>
			!= HAL_OK) {
		Error_handler();
 80007b4:	f000 f8b0 	bl	8000918 <Error_handler>
	}

	tim2PWM_Config.Pulse = (htimer2.Init.Period * 75) / 100;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <TIMER2_Init+0x100>)
 80007ba:	68da      	ldr	r2, [r3, #12]
 80007bc:	4613      	mov	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	011a      	lsls	r2, r3, #4
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	4a16      	ldr	r2, [pc, #88]	; (8000820 <TIMER2_Init+0x104>)
 80007c8:	fba2 2303 	umull	r2, r3, r2, r3
 80007cc:	095b      	lsrs	r3, r3, #5
 80007ce:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htimer2, &tim2PWM_Config, TIM_CHANNEL_3)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2208      	movs	r2, #8
 80007d4:	4619      	mov	r1, r3
 80007d6:	4811      	ldr	r0, [pc, #68]	; (800081c <TIMER2_Init+0x100>)
 80007d8:	f001 fb70 	bl	8001ebc <HAL_TIM_PWM_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <TIMER2_Init+0xca>
			!= HAL_OK) {
		Error_handler();
 80007e2:	f000 f899 	bl	8000918 <Error_handler>
	}

	tim2PWM_Config.Pulse = (htimer2.Init.Period * 95) / 100;
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <TIMER2_Init+0x100>)
 80007e8:	68da      	ldr	r2, [r3, #12]
 80007ea:	4613      	mov	r3, r2
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	4413      	add	r3, r2
 80007f0:	015b      	lsls	r3, r3, #5
 80007f2:	1a9b      	subs	r3, r3, r2
 80007f4:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <TIMER2_Init+0x104>)
 80007f6:	fba2 2303 	umull	r2, r3, r2, r3
 80007fa:	095b      	lsrs	r3, r3, #5
 80007fc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htimer2, &tim2PWM_Config, TIM_CHANNEL_4)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	220c      	movs	r2, #12
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <TIMER2_Init+0x100>)
 8000806:	f001 fb59 	bl	8001ebc <HAL_TIM_PWM_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <TIMER2_Init+0xf8>
			!= HAL_OK) {
		Error_handler();
 8000810:	f000 f882 	bl	8000918 <Error_handler>
	}
}
 8000814:	bf00      	nop
 8000816:	3720      	adds	r7, #32
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000048 	.word	0x20000048
 8000820:	51eb851f 	.word	0x51eb851f

08000824 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	/* TIM2_CH1 toggling with frequency = 500 Hz */
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	7f1b      	ldrb	r3, [r3, #28]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d113      	bne.n	800085c <HAL_TIM_OC_DelayElapsedCallback+0x38>
		ccr_content1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000834:	2100      	movs	r1, #0
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f001 fc02 	bl	8002040 <HAL_TIM_ReadCapturedValue>
 800083c:	4603      	mov	r3, r0
 800083e:	4a2d      	ldr	r2, [pc, #180]	; (80008f4 <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
 8000840:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, ccr_content1 + pulse1_value);
 8000842:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
 8000844:	6819      	ldr	r1, [r3, #0]
 8000846:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	440a      	add	r2, r1
 8000850:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000856:	4829      	ldr	r0, [pc, #164]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0xd8>)
 8000858:	f000 fc74 	bl	8001144 <HAL_GPIO_TogglePin>
	}

	/* TIM2_CH2 toggling with frequency = 1000 Hz */
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	7f1b      	ldrb	r3, [r3, #28]
 8000860:	2b02      	cmp	r3, #2
 8000862:	d113      	bne.n	800088c <HAL_TIM_OC_DelayElapsedCallback+0x68>
		ccr_content2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000864:	2104      	movs	r1, #4
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f001 fbea 	bl	8002040 <HAL_TIM_ReadCapturedValue>
 800086c:	4603      	mov	r3, r0
 800086e:	4a24      	ldr	r2, [pc, #144]	; (8000900 <HAL_TIM_OC_DelayElapsedCallback+0xdc>)
 8000870:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, ccr_content2 + pulse2_value);
 8000872:	4b23      	ldr	r3, [pc, #140]	; (8000900 <HAL_TIM_OC_DelayElapsedCallback+0xdc>)
 8000874:	6819      	ldr	r1, [r3, #0]
 8000876:	4b23      	ldr	r3, [pc, #140]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0xe0>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	440a      	add	r2, r1
 8000880:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000882:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000886:	481d      	ldr	r0, [pc, #116]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0xd8>)
 8000888:	f000 fc5c 	bl	8001144 <HAL_GPIO_TogglePin>

	}

	/* TIM2_CH3 toggling with frequency = 2000 Hz */
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	7f1b      	ldrb	r3, [r3, #28]
 8000890:	2b04      	cmp	r3, #4
 8000892:	d113      	bne.n	80008bc <HAL_TIM_OC_DelayElapsedCallback+0x98>
		ccr_content3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000894:	2108      	movs	r1, #8
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f001 fbd2 	bl	8002040 <HAL_TIM_ReadCapturedValue>
 800089c:	4603      	mov	r3, r0
 800089e:	4a1a      	ldr	r2, [pc, #104]	; (8000908 <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 80008a0:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, ccr_content3 + pulse3_value);
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 80008a4:	6819      	ldr	r1, [r3, #0]
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <HAL_TIM_OC_DelayElapsedCallback+0xe8>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	440a      	add	r2, r1
 80008b0:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80008b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b6:	4811      	ldr	r0, [pc, #68]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0xd8>)
 80008b8:	f000 fc44 	bl	8001144 <HAL_GPIO_TogglePin>

	}

	/* TIM2_CH4 toggling with frequency = 4000 Hz */
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	7f1b      	ldrb	r3, [r3, #28]
 80008c0:	2b08      	cmp	r3, #8
 80008c2:	d113      	bne.n	80008ec <HAL_TIM_OC_DelayElapsedCallback+0xc8>
		ccr_content4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80008c4:	210c      	movs	r1, #12
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f001 fbba 	bl	8002040 <HAL_TIM_ReadCapturedValue>
 80008cc:	4603      	mov	r3, r0
 80008ce:	4a10      	ldr	r2, [pc, #64]	; (8000910 <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 80008d0:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, ccr_content4 + pulse4_value);
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 80008d4:	6819      	ldr	r1, [r3, #0]
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	440a      	add	r2, r1
 80008e0:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80008e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0xd8>)
 80008e8:	f000 fc2c 	bl	8001144 <HAL_GPIO_TogglePin>

	}
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000040 	.word	0x20000040
 80008f8:	20000000 	.word	0x20000000
 80008fc:	40020c00 	.word	0x40020c00
 8000900:	20000038 	.word	0x20000038
 8000904:	20000004 	.word	0x20000004
 8000908:	20000044 	.word	0x20000044
 800090c:	20000008 	.word	0x20000008
 8000910:	2000003c 	.word	0x2000003c
 8000914:	2000000c 	.word	0x2000000c

08000918 <Error_handler>:

void Error_handler(void) {
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
	while (1)
 800091c:	e7fe      	b.n	800091c <Error_handler+0x4>
	...

08000920 <HAL_MspInit>:
#include "main.h"

void HAL_MspInit(void) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <HAL_MspInit+0x7c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	4a1b      	ldr	r2, [pc, #108]	; (800099c <HAL_MspInit+0x7c>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000934:	6453      	str	r3, [r2, #68]	; 0x44
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <HAL_MspInit+0x7c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <HAL_MspInit+0x7c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a14      	ldr	r2, [pc, #80]	; (800099c <HAL_MspInit+0x7c>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_MspInit+0x7c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]
	//Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095e:	2003      	movs	r0, #3
 8000960:	f000 fa00 	bl	8000d64 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <HAL_MspInit+0x80>)
 8000966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000968:	4a0d      	ldr	r2, [pc, #52]	; (80009a0 <HAL_MspInit+0x80>)
 800096a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800096e:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	f06f 000b 	mvn.w	r0, #11
 8000978:	f000 f9ff 	bl	8000d7a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	f06f 000a 	mvn.w	r0, #10
 8000984:	f000 f9f9 	bl	8000d7a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	f06f 0009 	mvn.w	r0, #9
 8000990:	f000 f9f3 	bl	8000d7a <HAL_NVIC_SetPriority>
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef tim2OC_ch_gpios;
	//1. enable the peripheral clock for the timer2 peripheral
	__HAL_RCC_TIM2_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	4b2a      	ldr	r3, [pc, #168]	; (8000a5c <HAL_TIM_PWM_MspInit+0xb8>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	4a29      	ldr	r2, [pc, #164]	; (8000a5c <HAL_TIM_PWM_MspInit+0xb8>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	6413      	str	r3, [r2, #64]	; 0x40
 80009bc:	4b27      	ldr	r3, [pc, #156]	; (8000a5c <HAL_TIM_PWM_MspInit+0xb8>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <HAL_TIM_PWM_MspInit+0xb8>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d0:	4a22      	ldr	r2, [pc, #136]	; (8000a5c <HAL_TIM_PWM_MspInit+0xb8>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	6313      	str	r3, [r2, #48]	; 0x30
 80009d8:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <HAL_TIM_PWM_MspInit+0xb8>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <HAL_TIM_PWM_MspInit+0xb8>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <HAL_TIM_PWM_MspInit+0xb8>)
 80009ee:	f043 0302 	orr.w	r3, r3, #2
 80009f2:	6313      	str	r3, [r2, #48]	; 0x30
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <HAL_TIM_PWM_MspInit+0xb8>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
	/* PA0 --> TIM2_CH1
	 PA1 --> TIM2_CH2
	 PB10 --> TIM2_CH3
	 PB11 --> TIM2_CH4 */

	tim2OC_ch_gpios.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000a00:	2303      	movs	r3, #3
 8000a02:	617b      	str	r3, [r7, #20]
	tim2OC_ch_gpios.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61bb      	str	r3, [r7, #24]
	tim2OC_ch_gpios.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
	tim2OC_ch_gpios.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
	tim2OC_ch_gpios.Alternate = GPIO_AF1_TIM2;
 8000a10:	2301      	movs	r3, #1
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &tim2OC_ch_gpios);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4811      	ldr	r0, [pc, #68]	; (8000a60 <HAL_TIM_PWM_MspInit+0xbc>)
 8000a1c:	f000 fa0e 	bl	8000e3c <HAL_GPIO_Init>

	tim2OC_ch_gpios.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 8000a20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a24:	617b      	str	r3, [r7, #20]
	tim2OC_ch_gpios.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
	tim2OC_ch_gpios.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
	tim2OC_ch_gpios.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
	tim2OC_ch_gpios.Alternate = GPIO_AF1_TIM2;
 8000a32:	2301      	movs	r3, #1
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &tim2OC_ch_gpios);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <HAL_TIM_PWM_MspInit+0xc0>)
 8000a3e:	f000 f9fd 	bl	8000e3c <HAL_GPIO_Init>

	//3. nvic settings
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	210f      	movs	r1, #15
 8000a46:	201c      	movs	r0, #28
 8000a48:	f000 f997 	bl	8000d7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a4c:	201c      	movs	r0, #28
 8000a4e:	f000 f9b0 	bl	8000db2 <HAL_NVIC_EnableIRQ>

}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	; 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020000 	.word	0x40020000
 8000a64:	40020400 	.word	0x40020400

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <SystemInit+0x20>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a72:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <SystemInit+0x20>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a90:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a92:	490e      	ldr	r1, [pc, #56]	; (8000acc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a94:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a98:	e002      	b.n	8000aa0 <LoopCopyDataInit>

08000a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9e:	3304      	adds	r3, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa4:	d3f9      	bcc.n	8000a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa6:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aa8:	4c0b      	ldr	r4, [pc, #44]	; (8000ad8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aac:	e001      	b.n	8000ab2 <LoopFillZerobss>

08000aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab0:	3204      	adds	r2, #4

08000ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab4:	d3fb      	bcc.n	8000aae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ab6:	f7ff ffd7 	bl	8000a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aba:	f001 fd73 	bl	80025a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000abe:	f7ff fd19 	bl	80004f4 <main>
  bx  lr    
 8000ac2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ac4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000acc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ad0:	08002634 	.word	0x08002634
  ldr r2, =_sbss
 8000ad4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000ad8:	20000094 	.word	0x20000094

08000adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC_IRQHandler>
	...

08000ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <HAL_Init+0x40>)
 8000aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <HAL_Init+0x40>)
 8000af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_Init+0x40>)
 8000b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f92b 	bl	8000d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 f808 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b14:	f7ff ff04 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023c00 	.word	0x40023c00

08000b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x54>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_InitTick+0x58>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f943 	bl	8000dce <HAL_SYSTICK_Config>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00e      	b.n	8000b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d80a      	bhi.n	8000b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f000 f90b 	bl	8000d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <HAL_InitTick+0x5c>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e000      	b.n	8000b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000010 	.word	0x20000010
 8000b7c:	20000018 	.word	0x20000018
 8000b80:	20000014 	.word	0x20000014

08000b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000018 	.word	0x20000018
 8000ba8:	20000090 	.word	0x20000090

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000090 	.word	0x20000090

08000bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db0b      	blt.n	8000c52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f003 021f 	and.w	r2, r3, #31
 8000c40:	4907      	ldr	r1, [pc, #28]	; (8000c60 <__NVIC_EnableIRQ+0x38>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	2001      	movs	r0, #1
 8000c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db0a      	blt.n	8000c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	490c      	ldr	r1, [pc, #48]	; (8000cb0 <__NVIC_SetPriority+0x4c>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c8c:	e00a      	b.n	8000ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <__NVIC_SetPriority+0x50>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	0112      	lsls	r2, r2, #4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	761a      	strb	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2304      	movcs	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d902      	bls.n	8000ce8 <NVIC_EncodePriority+0x30>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	e000      	b.n	8000cea <NVIC_EncodePriority+0x32>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	4313      	orrs	r3, r2
         );
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	; 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d30:	d301      	bcc.n	8000d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00f      	b.n	8000d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <SysTick_Config+0x40>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3e:	210f      	movs	r1, #15
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f7ff ff8e 	bl	8000c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <SysTick_Config+0x40>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <SysTick_Config+0x40>)
 8000d50:	2207      	movs	r2, #7
 8000d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	e000e010 	.word	0xe000e010

08000d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff ff29 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8c:	f7ff ff3e 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	f7ff ff8e 	bl	8000cb8 <NVIC_EncodePriority>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff5d 	bl	8000c64 <__NVIC_SetPriority>
}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff31 	bl	8000c28 <__NVIC_EnableIRQ>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ffa2 	bl	8000d20 <SysTick_Config>
 8000ddc:	4603      	mov	r3, r0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d106      	bne.n	8000e04 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000e02:	e005      	b.n	8000e10 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e0a:	f023 0304 	bic.w	r3, r3, #4
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e010 	.word	0xe000e010

08000e20 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000e24:	f000 f802 	bl	8000e2c <HAL_SYSTICK_Callback>
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	e159      	b.n	800110c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	f040 8148 	bne.w	8001106 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d005      	beq.n	8000e8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d130      	bne.n	8000ef0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	f003 0201 	and.w	r2, r3, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d017      	beq.n	8000f2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d123      	bne.n	8000f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	69b9      	ldr	r1, [r7, #24]
 8000f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0203 	and.w	r2, r3, #3
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80a2 	beq.w	8001106 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b57      	ldr	r3, [pc, #348]	; (8001124 <HAL_GPIO_Init+0x2e8>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a56      	ldr	r2, [pc, #344]	; (8001124 <HAL_GPIO_Init+0x2e8>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b54      	ldr	r3, [pc, #336]	; (8001124 <HAL_GPIO_Init+0x2e8>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fde:	4a52      	ldr	r2, [pc, #328]	; (8001128 <HAL_GPIO_Init+0x2ec>)
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a49      	ldr	r2, [pc, #292]	; (800112c <HAL_GPIO_Init+0x2f0>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d019      	beq.n	800103e <HAL_GPIO_Init+0x202>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a48      	ldr	r2, [pc, #288]	; (8001130 <HAL_GPIO_Init+0x2f4>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d013      	beq.n	800103a <HAL_GPIO_Init+0x1fe>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a47      	ldr	r2, [pc, #284]	; (8001134 <HAL_GPIO_Init+0x2f8>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00d      	beq.n	8001036 <HAL_GPIO_Init+0x1fa>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a46      	ldr	r2, [pc, #280]	; (8001138 <HAL_GPIO_Init+0x2fc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d007      	beq.n	8001032 <HAL_GPIO_Init+0x1f6>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a45      	ldr	r2, [pc, #276]	; (800113c <HAL_GPIO_Init+0x300>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_GPIO_Init+0x1f2>
 800102a:	2304      	movs	r3, #4
 800102c:	e008      	b.n	8001040 <HAL_GPIO_Init+0x204>
 800102e:	2307      	movs	r3, #7
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x204>
 8001032:	2303      	movs	r3, #3
 8001034:	e004      	b.n	8001040 <HAL_GPIO_Init+0x204>
 8001036:	2302      	movs	r3, #2
 8001038:	e002      	b.n	8001040 <HAL_GPIO_Init+0x204>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <HAL_GPIO_Init+0x204>
 800103e:	2300      	movs	r3, #0
 8001040:	69fa      	ldr	r2, [r7, #28]
 8001042:	f002 0203 	and.w	r2, r2, #3
 8001046:	0092      	lsls	r2, r2, #2
 8001048:	4093      	lsls	r3, r2
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001050:	4935      	ldr	r1, [pc, #212]	; (8001128 <HAL_GPIO_Init+0x2ec>)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	3302      	adds	r3, #2
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105e:	4b38      	ldr	r3, [pc, #224]	; (8001140 <HAL_GPIO_Init+0x304>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001082:	4a2f      	ldr	r2, [pc, #188]	; (8001140 <HAL_GPIO_Init+0x304>)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001088:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <HAL_GPIO_Init+0x304>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ac:	4a24      	ldr	r2, [pc, #144]	; (8001140 <HAL_GPIO_Init+0x304>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b2:	4b23      	ldr	r3, [pc, #140]	; (8001140 <HAL_GPIO_Init+0x304>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d6:	4a1a      	ldr	r2, [pc, #104]	; (8001140 <HAL_GPIO_Init+0x304>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <HAL_GPIO_Init+0x304>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001100:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <HAL_GPIO_Init+0x304>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3301      	adds	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	2b0f      	cmp	r3, #15
 8001110:	f67f aea2 	bls.w	8000e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40013800 	.word	0x40013800
 800112c:	40020000 	.word	0x40020000
 8001130:	40020400 	.word	0x40020400
 8001134:	40020800 	.word	0x40020800
 8001138:	40020c00 	.word	0x40020c00
 800113c:	40021000 	.word	0x40021000
 8001140:	40013c00 	.word	0x40013c00

08001144 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001156:	887a      	ldrh	r2, [r7, #2]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4013      	ands	r3, r2
 800115c:	041a      	lsls	r2, r3, #16
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	43d9      	mvns	r1, r3
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	400b      	ands	r3, r1
 8001166:	431a      	orrs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	619a      	str	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e264      	b.n	8001654 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d075      	beq.n	8001282 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001196:	4ba3      	ldr	r3, [pc, #652]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d00c      	beq.n	80011bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a2:	4ba0      	ldr	r3, [pc, #640]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d112      	bne.n	80011d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ae:	4b9d      	ldr	r3, [pc, #628]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011ba:	d10b      	bne.n	80011d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011bc:	4b99      	ldr	r3, [pc, #612]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d05b      	beq.n	8001280 <HAL_RCC_OscConfig+0x108>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d157      	bne.n	8001280 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e23f      	b.n	8001654 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011dc:	d106      	bne.n	80011ec <HAL_RCC_OscConfig+0x74>
 80011de:	4b91      	ldr	r3, [pc, #580]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a90      	ldr	r2, [pc, #576]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e01d      	b.n	8001228 <HAL_RCC_OscConfig+0xb0>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011f4:	d10c      	bne.n	8001210 <HAL_RCC_OscConfig+0x98>
 80011f6:	4b8b      	ldr	r3, [pc, #556]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a8a      	ldr	r2, [pc, #552]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	4b88      	ldr	r3, [pc, #544]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a87      	ldr	r2, [pc, #540]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	e00b      	b.n	8001228 <HAL_RCC_OscConfig+0xb0>
 8001210:	4b84      	ldr	r3, [pc, #528]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a83      	ldr	r2, [pc, #524]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	4b81      	ldr	r3, [pc, #516]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a80      	ldr	r2, [pc, #512]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d013      	beq.n	8001258 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff fcbc 	bl	8000bac <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001238:	f7ff fcb8 	bl	8000bac <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b64      	cmp	r3, #100	; 0x64
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e204      	b.n	8001654 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124a:	4b76      	ldr	r3, [pc, #472]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0f0      	beq.n	8001238 <HAL_RCC_OscConfig+0xc0>
 8001256:	e014      	b.n	8001282 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fca8 	bl	8000bac <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001260:	f7ff fca4 	bl	8000bac <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b64      	cmp	r3, #100	; 0x64
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e1f0      	b.n	8001654 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001272:	4b6c      	ldr	r3, [pc, #432]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f0      	bne.n	8001260 <HAL_RCC_OscConfig+0xe8>
 800127e:	e000      	b.n	8001282 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d063      	beq.n	8001356 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800128e:	4b65      	ldr	r3, [pc, #404]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00b      	beq.n	80012b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129a:	4b62      	ldr	r3, [pc, #392]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012a2:	2b08      	cmp	r3, #8
 80012a4:	d11c      	bne.n	80012e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012a6:	4b5f      	ldr	r3, [pc, #380]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d116      	bne.n	80012e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b2:	4b5c      	ldr	r3, [pc, #368]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <HAL_RCC_OscConfig+0x152>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d001      	beq.n	80012ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e1c4      	b.n	8001654 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ca:	4b56      	ldr	r3, [pc, #344]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4952      	ldr	r1, [pc, #328]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012de:	e03a      	b.n	8001356 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d020      	beq.n	800132a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e8:	4b4f      	ldr	r3, [pc, #316]	; (8001428 <HAL_RCC_OscConfig+0x2b0>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ee:	f7ff fc5d 	bl	8000bac <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f6:	f7ff fc59 	bl	8000bac <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e1a5      	b.n	8001654 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001308:	4b46      	ldr	r3, [pc, #280]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001314:	4b43      	ldr	r3, [pc, #268]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	4940      	ldr	r1, [pc, #256]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	4313      	orrs	r3, r2
 8001326:	600b      	str	r3, [r1, #0]
 8001328:	e015      	b.n	8001356 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800132a:	4b3f      	ldr	r3, [pc, #252]	; (8001428 <HAL_RCC_OscConfig+0x2b0>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001330:	f7ff fc3c 	bl	8000bac <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001338:	f7ff fc38 	bl	8000bac <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e184      	b.n	8001654 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134a:	4b36      	ldr	r3, [pc, #216]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d030      	beq.n	80013c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d016      	beq.n	8001398 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800136a:	4b30      	ldr	r3, [pc, #192]	; (800142c <HAL_RCC_OscConfig+0x2b4>)
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001370:	f7ff fc1c 	bl	8000bac <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001378:	f7ff fc18 	bl	8000bac <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e164      	b.n	8001654 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138a:	4b26      	ldr	r3, [pc, #152]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 800138c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0x200>
 8001396:	e015      	b.n	80013c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001398:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_RCC_OscConfig+0x2b4>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139e:	f7ff fc05 	bl	8000bac <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a6:	f7ff fc01 	bl	8000bac <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e14d      	b.n	8001654 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80013ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1f0      	bne.n	80013a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 80a0 	beq.w	8001512 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10f      	bne.n	8001402 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f0:	6413      	str	r3, [r2, #64]	; 0x40
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013fe:	2301      	movs	r3, #1
 8001400:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_RCC_OscConfig+0x2b8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140a:	2b00      	cmp	r3, #0
 800140c:	d121      	bne.n	8001452 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_RCC_OscConfig+0x2b8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_RCC_OscConfig+0x2b8>)
 8001414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141a:	f7ff fbc7 	bl	8000bac <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001420:	e011      	b.n	8001446 <HAL_RCC_OscConfig+0x2ce>
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	42470000 	.word	0x42470000
 800142c:	42470e80 	.word	0x42470e80
 8001430:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001434:	f7ff fbba 	bl	8000bac <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e106      	b.n	8001654 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001446:	4b85      	ldr	r3, [pc, #532]	; (800165c <HAL_RCC_OscConfig+0x4e4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d106      	bne.n	8001468 <HAL_RCC_OscConfig+0x2f0>
 800145a:	4b81      	ldr	r3, [pc, #516]	; (8001660 <HAL_RCC_OscConfig+0x4e8>)
 800145c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145e:	4a80      	ldr	r2, [pc, #512]	; (8001660 <HAL_RCC_OscConfig+0x4e8>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6713      	str	r3, [r2, #112]	; 0x70
 8001466:	e01c      	b.n	80014a2 <HAL_RCC_OscConfig+0x32a>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b05      	cmp	r3, #5
 800146e:	d10c      	bne.n	800148a <HAL_RCC_OscConfig+0x312>
 8001470:	4b7b      	ldr	r3, [pc, #492]	; (8001660 <HAL_RCC_OscConfig+0x4e8>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001474:	4a7a      	ldr	r2, [pc, #488]	; (8001660 <HAL_RCC_OscConfig+0x4e8>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	6713      	str	r3, [r2, #112]	; 0x70
 800147c:	4b78      	ldr	r3, [pc, #480]	; (8001660 <HAL_RCC_OscConfig+0x4e8>)
 800147e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001480:	4a77      	ldr	r2, [pc, #476]	; (8001660 <HAL_RCC_OscConfig+0x4e8>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6713      	str	r3, [r2, #112]	; 0x70
 8001488:	e00b      	b.n	80014a2 <HAL_RCC_OscConfig+0x32a>
 800148a:	4b75      	ldr	r3, [pc, #468]	; (8001660 <HAL_RCC_OscConfig+0x4e8>)
 800148c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148e:	4a74      	ldr	r2, [pc, #464]	; (8001660 <HAL_RCC_OscConfig+0x4e8>)
 8001490:	f023 0301 	bic.w	r3, r3, #1
 8001494:	6713      	str	r3, [r2, #112]	; 0x70
 8001496:	4b72      	ldr	r3, [pc, #456]	; (8001660 <HAL_RCC_OscConfig+0x4e8>)
 8001498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149a:	4a71      	ldr	r2, [pc, #452]	; (8001660 <HAL_RCC_OscConfig+0x4e8>)
 800149c:	f023 0304 	bic.w	r3, r3, #4
 80014a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d015      	beq.n	80014d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014aa:	f7ff fb7f 	bl	8000bac <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b0:	e00a      	b.n	80014c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b2:	f7ff fb7b 	bl	8000bac <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e0c5      	b.n	8001654 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c8:	4b65      	ldr	r3, [pc, #404]	; (8001660 <HAL_RCC_OscConfig+0x4e8>)
 80014ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0ee      	beq.n	80014b2 <HAL_RCC_OscConfig+0x33a>
 80014d4:	e014      	b.n	8001500 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7ff fb69 	bl	8000bac <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014dc:	e00a      	b.n	80014f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014de:	f7ff fb65 	bl	8000bac <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e0af      	b.n	8001654 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f4:	4b5a      	ldr	r3, [pc, #360]	; (8001660 <HAL_RCC_OscConfig+0x4e8>)
 80014f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1ee      	bne.n	80014de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001500:	7dfb      	ldrb	r3, [r7, #23]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d105      	bne.n	8001512 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001506:	4b56      	ldr	r3, [pc, #344]	; (8001660 <HAL_RCC_OscConfig+0x4e8>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a55      	ldr	r2, [pc, #340]	; (8001660 <HAL_RCC_OscConfig+0x4e8>)
 800150c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 809b 	beq.w	8001652 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800151c:	4b50      	ldr	r3, [pc, #320]	; (8001660 <HAL_RCC_OscConfig+0x4e8>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b08      	cmp	r3, #8
 8001526:	d05c      	beq.n	80015e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d141      	bne.n	80015b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001530:	4b4c      	ldr	r3, [pc, #304]	; (8001664 <HAL_RCC_OscConfig+0x4ec>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001536:	f7ff fb39 	bl	8000bac <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153e:	f7ff fb35 	bl	8000bac <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e081      	b.n	8001654 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001550:	4b43      	ldr	r3, [pc, #268]	; (8001660 <HAL_RCC_OscConfig+0x4e8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f0      	bne.n	800153e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69da      	ldr	r2, [r3, #28]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	019b      	lsls	r3, r3, #6
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001572:	085b      	lsrs	r3, r3, #1
 8001574:	3b01      	subs	r3, #1
 8001576:	041b      	lsls	r3, r3, #16
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157e:	061b      	lsls	r3, r3, #24
 8001580:	4937      	ldr	r1, [pc, #220]	; (8001660 <HAL_RCC_OscConfig+0x4e8>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001586:	4b37      	ldr	r3, [pc, #220]	; (8001664 <HAL_RCC_OscConfig+0x4ec>)
 8001588:	2201      	movs	r2, #1
 800158a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fb0e 	bl	8000bac <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff fb0a 	bl	8000bac <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e056      	b.n	8001654 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a6:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <HAL_RCC_OscConfig+0x4e8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x41c>
 80015b2:	e04e      	b.n	8001652 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <HAL_RCC_OscConfig+0x4ec>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff faf7 	bl	8000bac <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c2:	f7ff faf3 	bl	8000bac <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e03f      	b.n	8001654 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d4:	4b22      	ldr	r3, [pc, #136]	; (8001660 <HAL_RCC_OscConfig+0x4e8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f0      	bne.n	80015c2 <HAL_RCC_OscConfig+0x44a>
 80015e0:	e037      	b.n	8001652 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e032      	b.n	8001654 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <HAL_RCC_OscConfig+0x4e8>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d028      	beq.n	800164e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001606:	429a      	cmp	r2, r3
 8001608:	d121      	bne.n	800164e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001614:	429a      	cmp	r2, r3
 8001616:	d11a      	bne.n	800164e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800161e:	4013      	ands	r3, r2
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001624:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001626:	4293      	cmp	r3, r2
 8001628:	d111      	bne.n	800164e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001634:	085b      	lsrs	r3, r3, #1
 8001636:	3b01      	subs	r3, #1
 8001638:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800163a:	429a      	cmp	r2, r3
 800163c:	d107      	bne.n	800164e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800164a:	429a      	cmp	r2, r3
 800164c:	d001      	beq.n	8001652 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40007000 	.word	0x40007000
 8001660:	40023800 	.word	0x40023800
 8001664:	42470060 	.word	0x42470060

08001668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0cc      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800167c:	4b68      	ldr	r3, [pc, #416]	; (8001820 <HAL_RCC_ClockConfig+0x1b8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d90c      	bls.n	80016a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b65      	ldr	r3, [pc, #404]	; (8001820 <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001692:	4b63      	ldr	r3, [pc, #396]	; (8001820 <HAL_RCC_ClockConfig+0x1b8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d001      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e0b8      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d020      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016bc:	4b59      	ldr	r3, [pc, #356]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	4a58      	ldr	r2, [pc, #352]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d4:	4b53      	ldr	r3, [pc, #332]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	4a52      	ldr	r2, [pc, #328]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e0:	4b50      	ldr	r3, [pc, #320]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	494d      	ldr	r1, [pc, #308]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d044      	beq.n	8001788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d107      	bne.n	8001716 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	4b47      	ldr	r3, [pc, #284]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d119      	bne.n	8001746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e07f      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d003      	beq.n	8001726 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001722:	2b03      	cmp	r3, #3
 8001724:	d107      	bne.n	8001736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001726:	4b3f      	ldr	r3, [pc, #252]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d109      	bne.n	8001746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e06f      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001736:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e067      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001746:	4b37      	ldr	r3, [pc, #220]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f023 0203 	bic.w	r2, r3, #3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4934      	ldr	r1, [pc, #208]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	4313      	orrs	r3, r2
 8001756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001758:	f7ff fa28 	bl	8000bac <HAL_GetTick>
 800175c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175e:	e00a      	b.n	8001776 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001760:	f7ff fa24 	bl	8000bac <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f241 3288 	movw	r2, #5000	; 0x1388
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e04f      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 020c 	and.w	r2, r3, #12
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	429a      	cmp	r2, r3
 8001786:	d1eb      	bne.n	8001760 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001788:	4b25      	ldr	r3, [pc, #148]	; (8001820 <HAL_RCC_ClockConfig+0x1b8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d20c      	bcs.n	80017b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b22      	ldr	r3, [pc, #136]	; (8001820 <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <HAL_RCC_ClockConfig+0x1b8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e032      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d008      	beq.n	80017ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	4916      	ldr	r1, [pc, #88]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d009      	beq.n	80017ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	490e      	ldr	r1, [pc, #56]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ee:	f000 f821 	bl	8001834 <HAL_RCC_GetSysClockFreq>
 80017f2:	4602      	mov	r2, r0
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	490a      	ldr	r1, [pc, #40]	; (8001828 <HAL_RCC_ClockConfig+0x1c0>)
 8001800:	5ccb      	ldrb	r3, [r1, r3]
 8001802:	fa22 f303 	lsr.w	r3, r2, r3
 8001806:	4a09      	ldr	r2, [pc, #36]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_RCC_ClockConfig+0x1c8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff f988 	bl	8000b24 <HAL_InitTick>

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023c00 	.word	0x40023c00
 8001824:	40023800 	.word	0x40023800
 8001828:	08002614 	.word	0x08002614
 800182c:	20000010 	.word	0x20000010
 8001830:	20000014 	.word	0x20000014

08001834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001834:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001838:	b084      	sub	sp, #16
 800183a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	2300      	movs	r3, #0
 8001846:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800184c:	4b67      	ldr	r3, [pc, #412]	; (80019ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b08      	cmp	r3, #8
 8001856:	d00d      	beq.n	8001874 <HAL_RCC_GetSysClockFreq+0x40>
 8001858:	2b08      	cmp	r3, #8
 800185a:	f200 80bd 	bhi.w	80019d8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0x34>
 8001862:	2b04      	cmp	r3, #4
 8001864:	d003      	beq.n	800186e <HAL_RCC_GetSysClockFreq+0x3a>
 8001866:	e0b7      	b.n	80019d8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001868:	4b61      	ldr	r3, [pc, #388]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800186a:	60bb      	str	r3, [r7, #8]
       break;
 800186c:	e0b7      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800186e:	4b61      	ldr	r3, [pc, #388]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001870:	60bb      	str	r3, [r7, #8]
      break;
 8001872:	e0b4      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001874:	4b5d      	ldr	r3, [pc, #372]	; (80019ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800187c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800187e:	4b5b      	ldr	r3, [pc, #364]	; (80019ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d04d      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800188a:	4b58      	ldr	r3, [pc, #352]	; (80019ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	099b      	lsrs	r3, r3, #6
 8001890:	461a      	mov	r2, r3
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	f240 10ff 	movw	r0, #511	; 0x1ff
 800189a:	f04f 0100 	mov.w	r1, #0
 800189e:	ea02 0800 	and.w	r8, r2, r0
 80018a2:	ea03 0901 	and.w	r9, r3, r1
 80018a6:	4640      	mov	r0, r8
 80018a8:	4649      	mov	r1, r9
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	014b      	lsls	r3, r1, #5
 80018b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018b8:	0142      	lsls	r2, r0, #5
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	ebb0 0008 	subs.w	r0, r0, r8
 80018c2:	eb61 0109 	sbc.w	r1, r1, r9
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	018b      	lsls	r3, r1, #6
 80018d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018d4:	0182      	lsls	r2, r0, #6
 80018d6:	1a12      	subs	r2, r2, r0
 80018d8:	eb63 0301 	sbc.w	r3, r3, r1
 80018dc:	f04f 0000 	mov.w	r0, #0
 80018e0:	f04f 0100 	mov.w	r1, #0
 80018e4:	00d9      	lsls	r1, r3, #3
 80018e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018ea:	00d0      	lsls	r0, r2, #3
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	eb12 0208 	adds.w	r2, r2, r8
 80018f4:	eb43 0309 	adc.w	r3, r3, r9
 80018f8:	f04f 0000 	mov.w	r0, #0
 80018fc:	f04f 0100 	mov.w	r1, #0
 8001900:	0259      	lsls	r1, r3, #9
 8001902:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001906:	0250      	lsls	r0, r2, #9
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	461a      	mov	r2, r3
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	f7fe fc5e 	bl	80001d8 <__aeabi_uldivmod>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4613      	mov	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	e04a      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001926:	4b31      	ldr	r3, [pc, #196]	; (80019ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	099b      	lsrs	r3, r3, #6
 800192c:	461a      	mov	r2, r3
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001936:	f04f 0100 	mov.w	r1, #0
 800193a:	ea02 0400 	and.w	r4, r2, r0
 800193e:	ea03 0501 	and.w	r5, r3, r1
 8001942:	4620      	mov	r0, r4
 8001944:	4629      	mov	r1, r5
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	014b      	lsls	r3, r1, #5
 8001950:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001954:	0142      	lsls	r2, r0, #5
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	1b00      	subs	r0, r0, r4
 800195c:	eb61 0105 	sbc.w	r1, r1, r5
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	018b      	lsls	r3, r1, #6
 800196a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800196e:	0182      	lsls	r2, r0, #6
 8001970:	1a12      	subs	r2, r2, r0
 8001972:	eb63 0301 	sbc.w	r3, r3, r1
 8001976:	f04f 0000 	mov.w	r0, #0
 800197a:	f04f 0100 	mov.w	r1, #0
 800197e:	00d9      	lsls	r1, r3, #3
 8001980:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001984:	00d0      	lsls	r0, r2, #3
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	1912      	adds	r2, r2, r4
 800198c:	eb45 0303 	adc.w	r3, r5, r3
 8001990:	f04f 0000 	mov.w	r0, #0
 8001994:	f04f 0100 	mov.w	r1, #0
 8001998:	0299      	lsls	r1, r3, #10
 800199a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800199e:	0290      	lsls	r0, r2, #10
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4610      	mov	r0, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	461a      	mov	r2, r3
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	f7fe fc12 	bl	80001d8 <__aeabi_uldivmod>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4613      	mov	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	0c1b      	lsrs	r3, r3, #16
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	3301      	adds	r3, #1
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d4:	60bb      	str	r3, [r7, #8]
      break;
 80019d6:	e002      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80019da:	60bb      	str	r3, [r7, #8]
      break;
 80019dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019de:	68bb      	ldr	r3, [r7, #8]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	00f42400 	.word	0x00f42400
 80019f4:	007a1200 	.word	0x007a1200

080019f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000010 	.word	0x20000010

08001a10 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d109      	bne.n	8001a38 <HAL_TIM_OC_Start_IT+0x28>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	bf14      	ite	ne
 8001a30:	2301      	movne	r3, #1
 8001a32:	2300      	moveq	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	e022      	b.n	8001a7e <HAL_TIM_OC_Start_IT+0x6e>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d109      	bne.n	8001a52 <HAL_TIM_OC_Start_IT+0x42>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	bf14      	ite	ne
 8001a4a:	2301      	movne	r3, #1
 8001a4c:	2300      	moveq	r3, #0
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	e015      	b.n	8001a7e <HAL_TIM_OC_Start_IT+0x6e>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d109      	bne.n	8001a6c <HAL_TIM_OC_Start_IT+0x5c>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	bf14      	ite	ne
 8001a64:	2301      	movne	r3, #1
 8001a66:	2300      	moveq	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	e008      	b.n	8001a7e <HAL_TIM_OC_Start_IT+0x6e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	bf14      	ite	ne
 8001a78:	2301      	movne	r3, #1
 8001a7a:	2300      	moveq	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0b3      	b.n	8001bee <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d104      	bne.n	8001a96 <HAL_TIM_OC_Start_IT+0x86>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a94:	e013      	b.n	8001abe <HAL_TIM_OC_Start_IT+0xae>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d104      	bne.n	8001aa6 <HAL_TIM_OC_Start_IT+0x96>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001aa4:	e00b      	b.n	8001abe <HAL_TIM_OC_Start_IT+0xae>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d104      	bne.n	8001ab6 <HAL_TIM_OC_Start_IT+0xa6>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ab4:	e003      	b.n	8001abe <HAL_TIM_OC_Start_IT+0xae>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2202      	movs	r2, #2
 8001aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	2b0c      	cmp	r3, #12
 8001ac2:	d841      	bhi.n	8001b48 <HAL_TIM_OC_Start_IT+0x138>
 8001ac4:	a201      	add	r2, pc, #4	; (adr r2, 8001acc <HAL_TIM_OC_Start_IT+0xbc>)
 8001ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aca:	bf00      	nop
 8001acc:	08001b01 	.word	0x08001b01
 8001ad0:	08001b49 	.word	0x08001b49
 8001ad4:	08001b49 	.word	0x08001b49
 8001ad8:	08001b49 	.word	0x08001b49
 8001adc:	08001b13 	.word	0x08001b13
 8001ae0:	08001b49 	.word	0x08001b49
 8001ae4:	08001b49 	.word	0x08001b49
 8001ae8:	08001b49 	.word	0x08001b49
 8001aec:	08001b25 	.word	0x08001b25
 8001af0:	08001b49 	.word	0x08001b49
 8001af4:	08001b49 	.word	0x08001b49
 8001af8:	08001b49 	.word	0x08001b49
 8001afc:	08001b37 	.word	0x08001b37
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0202 	orr.w	r2, r2, #2
 8001b0e:	60da      	str	r2, [r3, #12]
      break;
 8001b10:	e01d      	b.n	8001b4e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0204 	orr.w	r2, r2, #4
 8001b20:	60da      	str	r2, [r3, #12]
      break;
 8001b22:	e014      	b.n	8001b4e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0208 	orr.w	r2, r2, #8
 8001b32:	60da      	str	r2, [r3, #12]
      break;
 8001b34:	e00b      	b.n	8001b4e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f042 0210 	orr.w	r2, r2, #16
 8001b44:	60da      	str	r2, [r3, #12]
      break;
 8001b46:	e002      	b.n	8001b4e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d14b      	bne.n	8001bec <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	6839      	ldr	r1, [r7, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 fce7 	bl	8002530 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a24      	ldr	r2, [pc, #144]	; (8001bf8 <HAL_TIM_OC_Start_IT+0x1e8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d107      	bne.n	8001b7c <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b7a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1d      	ldr	r2, [pc, #116]	; (8001bf8 <HAL_TIM_OC_Start_IT+0x1e8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d018      	beq.n	8001bb8 <HAL_TIM_OC_Start_IT+0x1a8>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b8e:	d013      	beq.n	8001bb8 <HAL_TIM_OC_Start_IT+0x1a8>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a19      	ldr	r2, [pc, #100]	; (8001bfc <HAL_TIM_OC_Start_IT+0x1ec>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00e      	beq.n	8001bb8 <HAL_TIM_OC_Start_IT+0x1a8>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a18      	ldr	r2, [pc, #96]	; (8001c00 <HAL_TIM_OC_Start_IT+0x1f0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d009      	beq.n	8001bb8 <HAL_TIM_OC_Start_IT+0x1a8>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a16      	ldr	r2, [pc, #88]	; (8001c04 <HAL_TIM_OC_Start_IT+0x1f4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d004      	beq.n	8001bb8 <HAL_TIM_OC_Start_IT+0x1a8>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <HAL_TIM_OC_Start_IT+0x1f8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d111      	bne.n	8001bdc <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d010      	beq.n	8001bec <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0201 	orr.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bda:	e007      	b.n	8001bec <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40010000 	.word	0x40010000
 8001bfc:	40000400 	.word	0x40000400
 8001c00:	40000800 	.word	0x40000800
 8001c04:	40000c00 	.word	0x40000c00
 8001c08:	40014000 	.word	0x40014000

08001c0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e041      	b.n	8001ca2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7fe feb6 	bl	80009a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3304      	adds	r3, #4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	f000 fa64 	bl	8002118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d122      	bne.n	8001d06 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d11b      	bne.n	8001d06 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f06f 0202 	mvn.w	r2, #2
 8001cd6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f9f5 	bl	80020dc <HAL_TIM_IC_CaptureCallback>
 8001cf2:	e005      	b.n	8001d00 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7fe fd95 	bl	8000824 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f9f8 	bl	80020f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d122      	bne.n	8001d5a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d11b      	bne.n	8001d5a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f06f 0204 	mvn.w	r2, #4
 8001d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f9cb 	bl	80020dc <HAL_TIM_IC_CaptureCallback>
 8001d46:	e005      	b.n	8001d54 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7fe fd6b 	bl	8000824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f9ce 	bl	80020f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d122      	bne.n	8001dae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d11b      	bne.n	8001dae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f06f 0208 	mvn.w	r2, #8
 8001d7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2204      	movs	r2, #4
 8001d84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f9a1 	bl	80020dc <HAL_TIM_IC_CaptureCallback>
 8001d9a:	e005      	b.n	8001da8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7fe fd41 	bl	8000824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f9a4 	bl	80020f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	2b10      	cmp	r3, #16
 8001dba:	d122      	bne.n	8001e02 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	2b10      	cmp	r3, #16
 8001dc8:	d11b      	bne.n	8001e02 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f06f 0210 	mvn.w	r2, #16
 8001dd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f977 	bl	80020dc <HAL_TIM_IC_CaptureCallback>
 8001dee:	e005      	b.n	8001dfc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7fe fd17 	bl	8000824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f97a 	bl	80020f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d10e      	bne.n	8001e2e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d107      	bne.n	8001e2e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f06f 0201 	mvn.w	r2, #1
 8001e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f94d 	bl	80020c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e38:	2b80      	cmp	r3, #128	; 0x80
 8001e3a:	d10e      	bne.n	8001e5a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e46:	2b80      	cmp	r3, #128	; 0x80
 8001e48:	d107      	bne.n	8001e5a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 fb9a 	bl	800258e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e64:	2b40      	cmp	r3, #64	; 0x40
 8001e66:	d10e      	bne.n	8001e86 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e72:	2b40      	cmp	r3, #64	; 0x40
 8001e74:	d107      	bne.n	8001e86 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f93f 	bl	8002104 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f003 0320 	and.w	r3, r3, #32
 8001e90:	2b20      	cmp	r3, #32
 8001e92:	d10e      	bne.n	8001eb2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f003 0320 	and.w	r3, r3, #32
 8001e9e:	2b20      	cmp	r3, #32
 8001ea0:	d107      	bne.n	8001eb2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f06f 0220 	mvn.w	r2, #32
 8001eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 fb64 	bl	800257a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e0ae      	b.n	8002038 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b0c      	cmp	r3, #12
 8001ee6:	f200 809f 	bhi.w	8002028 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001eea:	a201      	add	r2, pc, #4	; (adr r2, 8001ef0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef0:	08001f25 	.word	0x08001f25
 8001ef4:	08002029 	.word	0x08002029
 8001ef8:	08002029 	.word	0x08002029
 8001efc:	08002029 	.word	0x08002029
 8001f00:	08001f65 	.word	0x08001f65
 8001f04:	08002029 	.word	0x08002029
 8001f08:	08002029 	.word	0x08002029
 8001f0c:	08002029 	.word	0x08002029
 8001f10:	08001fa7 	.word	0x08001fa7
 8001f14:	08002029 	.word	0x08002029
 8001f18:	08002029 	.word	0x08002029
 8001f1c:	08002029 	.word	0x08002029
 8001f20:	08001fe7 	.word	0x08001fe7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f974 	bl	8002218 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699a      	ldr	r2, [r3, #24]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0208 	orr.w	r2, r2, #8
 8001f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0204 	bic.w	r2, r2, #4
 8001f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6999      	ldr	r1, [r3, #24]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	691a      	ldr	r2, [r3, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	619a      	str	r2, [r3, #24]
      break;
 8001f62:	e064      	b.n	800202e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f9ba 	bl	80022e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699a      	ldr	r2, [r3, #24]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6999      	ldr	r1, [r3, #24]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	021a      	lsls	r2, r3, #8
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	619a      	str	r2, [r3, #24]
      break;
 8001fa4:	e043      	b.n	800202e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fa05 	bl	80023bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	69da      	ldr	r2, [r3, #28]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f042 0208 	orr.w	r2, r2, #8
 8001fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	69da      	ldr	r2, [r3, #28]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0204 	bic.w	r2, r2, #4
 8001fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	69d9      	ldr	r1, [r3, #28]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	61da      	str	r2, [r3, #28]
      break;
 8001fe4:	e023      	b.n	800202e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68b9      	ldr	r1, [r7, #8]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 fa4f 	bl	8002490 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	69da      	ldr	r2, [r3, #28]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	69da      	ldr	r2, [r3, #28]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	69d9      	ldr	r1, [r3, #28]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	021a      	lsls	r2, r3, #8
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	61da      	str	r2, [r3, #28]
      break;
 8002026:	e002      	b.n	800202e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	75fb      	strb	r3, [r7, #23]
      break;
 800202c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002036:	7dfb      	ldrb	r3, [r7, #23]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b0c      	cmp	r3, #12
 8002052:	d831      	bhi.n	80020b8 <HAL_TIM_ReadCapturedValue+0x78>
 8002054:	a201      	add	r2, pc, #4	; (adr r2, 800205c <HAL_TIM_ReadCapturedValue+0x1c>)
 8002056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205a:	bf00      	nop
 800205c:	08002091 	.word	0x08002091
 8002060:	080020b9 	.word	0x080020b9
 8002064:	080020b9 	.word	0x080020b9
 8002068:	080020b9 	.word	0x080020b9
 800206c:	0800209b 	.word	0x0800209b
 8002070:	080020b9 	.word	0x080020b9
 8002074:	080020b9 	.word	0x080020b9
 8002078:	080020b9 	.word	0x080020b9
 800207c:	080020a5 	.word	0x080020a5
 8002080:	080020b9 	.word	0x080020b9
 8002084:	080020b9 	.word	0x080020b9
 8002088:	080020b9 	.word	0x080020b9
 800208c:	080020af 	.word	0x080020af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002096:	60fb      	str	r3, [r7, #12]

      break;
 8002098:	e00f      	b.n	80020ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a0:	60fb      	str	r3, [r7, #12]

      break;
 80020a2:	e00a      	b.n	80020ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020aa:	60fb      	str	r3, [r7, #12]

      break;
 80020ac:	e005      	b.n	80020ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	60fb      	str	r3, [r7, #12]

      break;
 80020b6:	e000      	b.n	80020ba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80020b8:	bf00      	nop
  }

  return tmpreg;
 80020ba:	68fb      	ldr	r3, [r7, #12]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a34      	ldr	r2, [pc, #208]	; (80021fc <TIM_Base_SetConfig+0xe4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d00f      	beq.n	8002150 <TIM_Base_SetConfig+0x38>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002136:	d00b      	beq.n	8002150 <TIM_Base_SetConfig+0x38>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a31      	ldr	r2, [pc, #196]	; (8002200 <TIM_Base_SetConfig+0xe8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d007      	beq.n	8002150 <TIM_Base_SetConfig+0x38>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a30      	ldr	r2, [pc, #192]	; (8002204 <TIM_Base_SetConfig+0xec>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d003      	beq.n	8002150 <TIM_Base_SetConfig+0x38>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a2f      	ldr	r2, [pc, #188]	; (8002208 <TIM_Base_SetConfig+0xf0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d108      	bne.n	8002162 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a25      	ldr	r2, [pc, #148]	; (80021fc <TIM_Base_SetConfig+0xe4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d01b      	beq.n	80021a2 <TIM_Base_SetConfig+0x8a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002170:	d017      	beq.n	80021a2 <TIM_Base_SetConfig+0x8a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a22      	ldr	r2, [pc, #136]	; (8002200 <TIM_Base_SetConfig+0xe8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <TIM_Base_SetConfig+0x8a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a21      	ldr	r2, [pc, #132]	; (8002204 <TIM_Base_SetConfig+0xec>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00f      	beq.n	80021a2 <TIM_Base_SetConfig+0x8a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a20      	ldr	r2, [pc, #128]	; (8002208 <TIM_Base_SetConfig+0xf0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00b      	beq.n	80021a2 <TIM_Base_SetConfig+0x8a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a1f      	ldr	r2, [pc, #124]	; (800220c <TIM_Base_SetConfig+0xf4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d007      	beq.n	80021a2 <TIM_Base_SetConfig+0x8a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a1e      	ldr	r2, [pc, #120]	; (8002210 <TIM_Base_SetConfig+0xf8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d003      	beq.n	80021a2 <TIM_Base_SetConfig+0x8a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a1d      	ldr	r2, [pc, #116]	; (8002214 <TIM_Base_SetConfig+0xfc>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d108      	bne.n	80021b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	4313      	orrs	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a08      	ldr	r2, [pc, #32]	; (80021fc <TIM_Base_SetConfig+0xe4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d103      	bne.n	80021e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	615a      	str	r2, [r3, #20]
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40010000 	.word	0x40010000
 8002200:	40000400 	.word	0x40000400
 8002204:	40000800 	.word	0x40000800
 8002208:	40000c00 	.word	0x40000c00
 800220c:	40014000 	.word	0x40014000
 8002210:	40014400 	.word	0x40014400
 8002214:	40014800 	.word	0x40014800

08002218 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	f023 0201 	bic.w	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f023 0303 	bic.w	r3, r3, #3
 800224e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f023 0302 	bic.w	r3, r3, #2
 8002260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	4313      	orrs	r3, r2
 800226a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a1c      	ldr	r2, [pc, #112]	; (80022e0 <TIM_OC1_SetConfig+0xc8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d10c      	bne.n	800228e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f023 0308 	bic.w	r3, r3, #8
 800227a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	4313      	orrs	r3, r2
 8002284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f023 0304 	bic.w	r3, r3, #4
 800228c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <TIM_OC1_SetConfig+0xc8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d111      	bne.n	80022ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800229c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	621a      	str	r2, [r3, #32]
}
 80022d4:	bf00      	nop
 80022d6:	371c      	adds	r7, #28
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	40010000 	.word	0x40010000

080022e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	f023 0210 	bic.w	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800231a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	021b      	lsls	r3, r3, #8
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4313      	orrs	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f023 0320 	bic.w	r3, r3, #32
 800232e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	4313      	orrs	r3, r2
 800233a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a1e      	ldr	r2, [pc, #120]	; (80023b8 <TIM_OC2_SetConfig+0xd4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d10d      	bne.n	8002360 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800234a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800235e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a15      	ldr	r2, [pc, #84]	; (80023b8 <TIM_OC2_SetConfig+0xd4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d113      	bne.n	8002390 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800236e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002376:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	621a      	str	r2, [r3, #32]
}
 80023aa:	bf00      	nop
 80023ac:	371c      	adds	r7, #28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40010000 	.word	0x40010000

080023bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 0303 	bic.w	r3, r3, #3
 80023f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	4313      	orrs	r3, r2
 8002410:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a1d      	ldr	r2, [pc, #116]	; (800248c <TIM_OC3_SetConfig+0xd0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d10d      	bne.n	8002436 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	4313      	orrs	r3, r2
 800242c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a14      	ldr	r2, [pc, #80]	; (800248c <TIM_OC3_SetConfig+0xd0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d113      	bne.n	8002466 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800244c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	621a      	str	r2, [r3, #32]
}
 8002480:	bf00      	nop
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	40010000 	.word	0x40010000

08002490 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	021b      	lsls	r3, r3, #8
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	031b      	lsls	r3, r3, #12
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a10      	ldr	r2, [pc, #64]	; (800252c <TIM_OC4_SetConfig+0x9c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d109      	bne.n	8002504 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	019b      	lsls	r3, r3, #6
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	621a      	str	r2, [r3, #32]
}
 800251e:	bf00      	nop
 8002520:	371c      	adds	r7, #28
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40010000 	.word	0x40010000

08002530 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	2201      	movs	r2, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a1a      	ldr	r2, [r3, #32]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	43db      	mvns	r3, r3
 8002552:	401a      	ands	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a1a      	ldr	r2, [r3, #32]
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	431a      	orrs	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	621a      	str	r2, [r3, #32]
}
 800256e:	bf00      	nop
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <__libc_init_array>:
 80025a4:	b570      	push	{r4, r5, r6, lr}
 80025a6:	4d0d      	ldr	r5, [pc, #52]	; (80025dc <__libc_init_array+0x38>)
 80025a8:	4c0d      	ldr	r4, [pc, #52]	; (80025e0 <__libc_init_array+0x3c>)
 80025aa:	1b64      	subs	r4, r4, r5
 80025ac:	10a4      	asrs	r4, r4, #2
 80025ae:	2600      	movs	r6, #0
 80025b0:	42a6      	cmp	r6, r4
 80025b2:	d109      	bne.n	80025c8 <__libc_init_array+0x24>
 80025b4:	4d0b      	ldr	r5, [pc, #44]	; (80025e4 <__libc_init_array+0x40>)
 80025b6:	4c0c      	ldr	r4, [pc, #48]	; (80025e8 <__libc_init_array+0x44>)
 80025b8:	f000 f820 	bl	80025fc <_init>
 80025bc:	1b64      	subs	r4, r4, r5
 80025be:	10a4      	asrs	r4, r4, #2
 80025c0:	2600      	movs	r6, #0
 80025c2:	42a6      	cmp	r6, r4
 80025c4:	d105      	bne.n	80025d2 <__libc_init_array+0x2e>
 80025c6:	bd70      	pop	{r4, r5, r6, pc}
 80025c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80025cc:	4798      	blx	r3
 80025ce:	3601      	adds	r6, #1
 80025d0:	e7ee      	b.n	80025b0 <__libc_init_array+0xc>
 80025d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80025d6:	4798      	blx	r3
 80025d8:	3601      	adds	r6, #1
 80025da:	e7f2      	b.n	80025c2 <__libc_init_array+0x1e>
 80025dc:	0800262c 	.word	0x0800262c
 80025e0:	0800262c 	.word	0x0800262c
 80025e4:	0800262c 	.word	0x0800262c
 80025e8:	08002630 	.word	0x08002630

080025ec <memset>:
 80025ec:	4402      	add	r2, r0
 80025ee:	4603      	mov	r3, r0
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d100      	bne.n	80025f6 <memset+0xa>
 80025f4:	4770      	bx	lr
 80025f6:	f803 1b01 	strb.w	r1, [r3], #1
 80025fa:	e7f9      	b.n	80025f0 <memset+0x4>

080025fc <_init>:
 80025fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fe:	bf00      	nop
 8002600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002602:	bc08      	pop	{r3}
 8002604:	469e      	mov	lr, r3
 8002606:	4770      	bx	lr

08002608 <_fini>:
 8002608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260a:	bf00      	nop
 800260c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800260e:	bc08      	pop	{r3}
 8002610:	469e      	mov	lr, r3
 8002612:	4770      	bx	lr
